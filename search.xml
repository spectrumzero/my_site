<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用github pages搭建你的个人网站</title>
    <url>/2025/06/24/build-site/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>首先，这不是一个完全手把手的指导，说明并不会事无巨细地展开。原因有两个，一是我认为我所略过的部分，完全可以通过查阅官方文档而<strong>快速而精准</strong>地解决，而不需要经过二次加工；第二是如果嫌麻烦，也完全可以问 ai 来解决——关于 ai，我十分推荐谷歌面向开发者的<a href="https://aistudio.google.com/prompts/new_chat">Google AI Studio</a>。我所提供的不是信息的重复，而是信息的聚合与组织，让你<strong>足以</strong>根据这个线路搭建自己的个人网站。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol start="0">
<li>一个 ai 工具，ai 现在几乎成了更快的搜索引擎，请积极利用它。我没有那么详细描述的部分你可以直接 copy 我的描述然后提出你的 prompt。</li>
<li>一个 terminal 和一个 shell<ul>
<li>对于 windows 用户，你<em>应该</em>使用 windows terminal + powershell 7</li>
<li>对于 Linux 用户，你可以使用 Kitty + fish</li>
<li>高贵的 mac 用户请自行 ai。</li>
</ul>
</li>
<li>一个包管理器，这会简化后面很多的安装步骤<ul>
<li>对于 windows 用户，你可以使用 scoop</li>
<li>其他操作系统的用户可以根据自己的操作系统来决定。我使用的是 yay。</li>
</ul>
</li>
<li>一个代码编辑器，比如<a href="https://code.visualstudio.com/docs">vscode</a>。它被用来编辑配置文件，也可以用来编辑我们的博客文章。在 terminal 中使用包管理器安装即可，具体如何安装和使用请自行 ai 或查阅对应文档。</li>
<li><strong>通畅的网络环境</strong>。遇到网络问题请使用代理+tun 模式。Mihomo 和 Clash 都支持 tun 模式。还有一种比较少见的情况是，尽管你开了代理和 tun，但 shell 没有使用代理，因此获取不到资源，那么这个时候你就应该设置一下 shell 的代理。</li>
</ol>
<h3 id="安装-Hexo-与初始化项目"><a href="#安装-Hexo-与初始化项目" class="headerlink" title="安装 Hexo 与初始化项目"></a>安装 Hexo 与初始化项目</h3><p>这个部分请先查阅<a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85">官方文档</a>。</p>
<p>它会要求你安装了 git 和 node.js 之后再安装 hexo 这个博客框架。那么，你应该在你的 terminal 中，利用 shell，通过你上一步安装了的包管理器，<strong>使用命令行</strong>去安装 git 和 node.js，并验证是否安装成功。</p>
<p>比如对于<a href="https://scoop.sh/#/apps?q=git&p=2">scoop 安装 git</a>：</p>
<figure class="highlight pwsh"><table><tr><td class="code"><pre><span class="line">scoop install main/git</span><br></pre></td></tr></table></figure>

<p>验证 git 是否安装成功，输出版本号则表示安装成功：</p>
<figure class="highlight pwsh"><table><tr><td class="code"><pre><span class="line">git <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<p>对于 node.js：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop install main/nodejs</span><br></pre></td></tr></table></figure>

<p>验证：</p>
<figure class="highlight pwsh"><table><tr><td class="code"><pre><span class="line">node <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<p>之后就根据文档的说明，使用命令行安装 hexo 即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><em>注意因为是<code>-g</code>全局安装，所以可能需要管理员权限</em>。</p>
<p>我们已经安装了 hexo 框架，但还没有使用它来帮助我们初始化一个网站项目，现在在命令行中键入并回车（<code>hexo-site</code>可以是其它你喜欢的任何名字）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init hexo-site</span><br></pre></td></tr></table></figure>

<p>这会在<strong>当前目录</strong>下生成一个名字为<code>hexo-site</code>的文件夹（如果你对当前目录的位置不满意，可以利用<code>cd</code>指令来改变当前目录，或者使用<code>mkdir</code>指令创建一个新的目录，然后<code>cd</code>进入这个新的目录）。这个文件夹就是你的网站在你本地计算机上的一个映射。然后我们进入这个文件夹：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd hexo-site</span><br></pre></td></tr></table></figure>

<p>这个时候我们其实可以在本地预览一下网站了。依次在命令行界面中（注意你现在应该处在网站项目的<strong>根目录</strong>下）使用<code>hexo c</code>，<code>hexo g</code>，<code>hexo s</code>，完成清理缓存、生成、本地预览。最后的<code>hexo s</code>命令的执行结果，会返回一个端口号（一般是 4000），打开浏览器，在地址栏输入<code>localhost:4000</code>，就会看到一个很朴素的网站界面，使用的是默认主题，所以下面我们要更换、自己配置主题。</p>
<p><em>注意，当你预览网站的时候，会占用一个端口，即 4000，在执行<code>hexo s</code>并预览了网页后，你可以回到命令行界面，按下<code>ctrl+c</code>键盘，终止预览，为下一次的预览空出 4000 端口</em>。</p>
<p>我们将会使用<a href="https://github.com/next-theme/hexo-theme-next">NexT 主题</a>，因为它保持了简洁的同时，还提供了丰富的配置选项和足够详细的文档支持，以及它还在<a href="https://github.com/next-theme/hexo-theme-next/releases/tag/v8.23.1">积极地更新迭代中</a>，后续应该会推出更多好玩的功能。这个主题其实已经有 10 多年的历史了，如今这个 2.6k star 的是它 2020 年之后的版本，而之前的版本有 8.2k star<a href="https://theme-next.js.org/docs/getting-started/upgrade">^1</a>。</p>
<p>当然，你也可以使用像<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a>这样的卡片式主题（上一次 release 在 25 年 3 月），或者是<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>这样也很综合全面的主题（上一次 release 在 24 年 7 月），不同的主题有不同的安装方式。你可以在<a href="https://hexo.io/themes/">这里</a>找到你喜欢的主题列表。但是在选择主题时，除了外观以外，很重要的一点是它有没有得到持续的维护，有没有详细的文档，以及允许自定义的选项是否达到了你的需求。</p>
<p>让我们继续。</p>
<h3 id="使用-NexT-主题"><a href="#使用-NexT-主题" class="headerlink" title="使用 NexT 主题"></a>使用 NexT 主题</h3><h4 id="安装与更新"><a href="#安装与更新" class="headerlink" title="安装与更新"></a>安装与更新</h4><p>同样的，请先查看<a href="https://theme-next.js.org/docs/getting-started/#NexT-Installation">官方文档</a>。</p>
<p>官方文档提供了两种安装（和更新）主题的方式。<strong>推荐使用 npm 的安装方式</strong>，因为这样后续的更新会非常方便。使用 git 除了需要手动<code>git clone</code>（这会让你的项目多出一个<code>themes/next</code>文件夹，这个文件夹以项目子模块的形式被纳入了 git 管理），手动<code>git pull</code>以外，由于要考虑到这个 git 子模块，也让你不太好管理你整个项目的源代码。</p>
<p>正如文档所说，在你的项目根目录运行安装命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>

<p>对于后续的更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next@latest</span><br></pre></td></tr></table></figure>

<h4 id="启用与配置"><a href="#启用与配置" class="headerlink" title="启用与配置"></a>启用与配置</h4><p>来自官方文档的<a href="https://theme-next.js.org/docs/getting-started/#Hexo-Configuration">这个部分</a>。</p>
<p>在安装了主题之后，你需要在<strong>hexo 的配置文件，即根目录下的<code>_config.yml</code>文件</strong>中启用这个主题。如果你之后打算使用其他主题，也在这个文件中做出修改就好：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<p>这个时候你可以在命令行界面中，在网站项目的<strong>根目录</strong>下执行<code>hexo c</code>-&gt;<code>hexo g</code>-&gt;<code>hexo s</code>，浏览器地址栏<code>localhost:4000</code>查看启用主题后的网站了。</p>
<p>hexo 的配置文件用来配置你网页中最基本的信息，比如名称、链接、部署方式等这些<strong>与主题无关</strong>的选项，而下面介绍的 next 的配置文件，则是配置你网页的外观、功能的主要位置。</p>
<p>首先，我们需要利用命令行，创建我们的主题配置文件，这份文件将会被放在项目根目录中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure>

<p>之后我们就可以在<code>_config.next.yml</code>文件中进行各种好玩的配置，它们最终都会覆盖默认的配置并生效。你可以随时<code>hexo c</code>-&gt;<code>g</code>-&gt;<code>s</code>-&gt;<code>localhost</code>查看，并<code>ctrl+c</code>结束预览。<code>hexo c</code>和<code>hexo g</code>并不总是必要的，但当效果不同于你的预想的时候，你总是可以且应该先清除缓存，并重新生成。</p>
<h4 id="下一步的配置"><a href="#下一步的配置" class="headerlink" title="下一步的配置"></a>下一步的配置</h4><p>后续的自定义其实很丰富了。但有必要再强调一下：</p>
<ul>
<li>当你想要自定义<strong>不</strong>依赖于主题的选项时，如：<ul>
<li>创建新的页面——例如<code>about</code>用来展示自己，<code>links</code>用来放你和你的朋友们，<code>tags</code>来展示文章标签——应该去看的是<a href="https://hexo.io/zh-cn/docs/commands">hexo 的文档</a>，<a href="https://theme-next.js.org/docs/theme-settings/custom-pages">next 的相关文档</a>可以作为更全面的支持。</li>
<li>创建新的文章或制定文章的 scaffold，查看<a href="https://hexo.io/zh-cn/docs/writing">hexo 的文档</a>。</li>
<li>配置网站的标题、描述、作者名、网址等等这些不依赖于任何主题的选项时，查看<a href="https://hexo.io/zh-cn/docs/configuration">hexo 的文档</a>。</li>
</ul>
</li>
<li>当你想要自定义依赖于主题的选项时，你应该看的是<a href="https://theme-next.js.org/docs/theme-settings/">next 的文档</a>，除了这个超链接，官网中还提供了其他的板块来供游玩，请自行游玩。</li>
<li>总之，你应该在 hexo 的文档和 next 的文档之间做出区分。与主题无关的，在<code>_config.yml</code>里配置或在命令行中执行以<code>hexo</code>开头的命令；与主题有关的，则在<code>_config.next.yml</code>中配置。<strong>勤查文档，查对文档</strong>。</li>
<li>可以自行谷歌其他人写的 hexo next 主题美化博客。这里就不赘述了。对于用户来讲，配置在技术上没有什么难度，就是一些选择题。</li>
<li>当然，你也可以直接借鉴别人的配置文件进行美化，比如<a href="https://github.com/spectrumzero/my_site/blob/main/_config.next.yml">我的</a>。</li>
</ul>
<h3 id="部署上线"><a href="#部署上线" class="headerlink" title="部署上线"></a>部署上线</h3><p>目前，我们的网站只能通过本地预览的方式，被我们自己看到。下一步我们就让它上线，成为整个互联网的一份子。</p>
<h4 id="在-github-上创建一个公有仓库"><a href="#在-github-上创建一个公有仓库" class="headerlink" title="在 github 上创建一个公有仓库"></a>在 github 上创建一个公有仓库</h4><p>当然，在你创建仓库之前，你需要登陆或注册一个 github 账号。</p>
<p>登陆之后，你有两个选项：</p>
<ol>
<li>创建一个名字为<code>github.username.io</code>的特殊仓库，它表示你在 github pages 上的个人主页，或根地址。如果创建这个仓库，那么之后你的网站的域名就是<code>github.username.io</code>。</li>
<li>创建一个名字为任意的仓库，例如<code>site</code>。如果这样创建，那么之后你的网站的域名就是<code>github.username.io/site/</code>，会比较长。</li>
</ol>
<p>有的人可以接受<code>github.username.io</code>这个域名，但有的人想要实现域名的自定义。如果是后者，那么其实选项一和选项二都无所谓，甚至选项二更好，因为它没有占用唯一的特殊名字，就像一个普通的仓库。我想要自定义域名，所以选择了选项二。对于不想要自定义域名的读者，选择选项一就好了，选项二相对于选项一只是多了一个自定义域名的步骤，不影响接下来的配置。</p>
<p><strong>但是请注意，如果你打算自定义域名，那么我建议选择选项二。因为之后自定义域名的步骤是基于我自身“<code>github.username.io/site</code>这个域名太长了”这个痛点牵引出来的，所以可以保证从选项二到自定义域名的过渡会相当顺利。当然，如果你选择了选项一，之后又想自定义域名，我觉得也没有任何问题，只是我自己没有经历过这个过程，所以不能保证不会出现非预期后果，但我个人觉得，其实后续的操作都是共通的</strong>。</p>
<p>怎么创建 github 仓库请自行 ai。注意都要是<strong>public</strong>的。</p>
<h4 id="指定部署方式"><a href="#指定部署方式" class="headerlink" title="指定部署方式"></a>指定部署方式</h4><p>我们使用 git 来完成部署。前面已经安装了 git，但是如果想要畅快使用 git，建议再做两件事：</p>
<ol>
<li><em>全局</em>配置 git 的用户名和邮箱，这是必须完成的初始化操作。</li>
<li>设置 github 的公钥，让自己有推送权限，如果没有设置，将来 push 的时候会提醒你设置。</li>
</ol>
<p>这二者麻烦自行 ai。然后我们查看<a href="https://hexo.io/zh-cn/docs/one-command-deployment">hexo 文档</a>，继续下一步。</p>
<p>在<code>_config.yml</code>中配置部署方式。指定部署的类型，刚刚在 github 上新建的远程仓库的名称，以及远程 repo 的分支。这里以我的仓库为例，建议使用 ssh 来指定仓库，避免网络问题（下面的 repo 项好像被阻挡了不能正常显示，完整的应为<code>git@github.com:spectrumzero/my_site.git</code>）：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&quot;git&quot;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:spectrumzero/my_site.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/2025/06/24/build-site/1.png"></p>
<p><em>注意，之所以将分支设置为<code>gh-pages</code>，是为了将整个项目的源代码和经过生成部署后的产物分开，以便更好地管理我的整个网站项目。在部署的时候，部署产物（Build Output）将会被推送到<code>gh-pages</code>分支，在此之后，自己则可以选择是否要将源代码推送到 main 分支。</em></p>
<p>最后在同一个文件中指定网站的<code>url</code>即可，比如对于选项一：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://spectrumzero.github.io/</span></span><br></pre></td></tr></table></figure>

<p>对于选项二：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://spectrumzero.github.io/my_site</span></span><br></pre></td></tr></table></figure>

<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>进入你的项目的根目录，利用命令行安装部署插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>这样我们就可以使用 git 进行部署了，同样在根目录下，<code>hexo c</code>-&gt;<code>hexo g</code>，可以选择要不要<code>hexo s</code>预览效果，然后直接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>然后去远程 repo 中查看：</p>
<p><img data-src="/2025/06/24/build-site/2.png"></p>
<p>当<code>github-pages</code>旁边的图标变成绿色的，我们就完成了部署，可以直接通过域名访问更新后的网站了，在地址栏输入<code>github.username.io</code>或<code>github.username.io/sitename</code>即可。</p>
<h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p>如果想要获得更加个性化的域名，那么请阅读这一节。</p>
<h4 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h4><p>有很多地方可以买到域名。我个人比较推荐的是<a href="https://porkbun.com/">porkbun</a>，因为你可以看到下一年续费需要多少钱，这个方面是比较透明的。而且也比其他商家比如 Namecheap 便宜，当然，也没有备案的说法。还有，如果你办理了<a href="https://education.github.com/pack">GitHub Student Developer Pack</a>，那么 Namecheap 好像可以免费提供域名<a href="https://education.github.com/experiences/virtual_event_kit">^2</a>（可惜我当时没有看到）。porkbun 支持 alipay，其他的商家可能不支持，但即便不支持，你或许也可以谷歌一下 wildcard。</p>
<p>下面以猪肉包举例：</p>
<ol>
<li>注册并登陆，进入这个页面，然后搜索你想要的域名<br><img data-src="/2025/06/24/build-site/3.png"></li>
<li>之后就会探出很多不同后缀的域名，选择喜欢的，购买结账就可以了。</li>
<li>购买成功之后，你的域名就会在首页的下方展示，点击<code>details</code>，并关注<code>NAMESERVERS</code>选项，因为后面会用到：<br><img data-src="/2025/06/24/build-site/4.png"></li>
</ol>
<h4 id="添加自定义域名文件-CNAME"><a href="#添加自定义域名文件-CNAME" class="headerlink" title="添加自定义域名文件 CNAME"></a>添加自定义域名文件 CNAME</h4><p>在项目的<strong>根目录下的<code>source/</code>文件夹中</strong>，创建<code>CNAME</code>文件，没有后缀，全部大写，然后在文件夹中写入我们购买的域名，比如我的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www.spectrumzero.me</span><br></pre></td></tr></table></figure>

<p>这一步是告诉 github pages，我们的项目最终会绑定哪个域名。</p>
<h4 id="设置-github-pages"><a href="#设置-github-pages" class="headerlink" title="设置 github pages"></a>设置 github pages</h4><p>如下图所示，点到指定的区域，重点关注红框区域中的内容，<code>Source</code>中选择<code>Deploy from a branch</code>，然后在<code>Branch</code>中选择我们之前在<code>_config.yml</code>的<code>deploy</code>部分所指定的分支，以及<code>/root</code>目录：<br><img data-src="/2025/06/24/build-site/5.png"></p>
<h4 id="设置域名-DNS-解析"><a href="#设置域名-DNS-解析" class="headerlink" title="设置域名 DNS 解析"></a>设置域名 DNS 解析</h4><p>我们使用<a href="https://www.cloudflare.com/zh-cn/">Cloudflare</a>来完成最终的域名解析。</p>
<h5 id="登陆-Cloudflare-并获取新的域名服务器地址"><a href="#登陆-Cloudflare-并获取新的域名服务器地址" class="headerlink" title="登陆 Cloudflare 并获取新的域名服务器地址"></a>登陆 Cloudflare 并获取新的域名服务器地址</h5><p>一般如果是新用户，就会有新手引导界面，跟随引导界面即可。如果没有，可以如图点击：</p>
<p><img data-src="/2025/06/24/build-site/6.png"></p>
<p><img data-src="/2025/06/24/build-site/7.png"></p>
<p><img data-src="/2025/06/24/build-site/8.png"></p>
<p><img data-src="/2025/06/24/build-site/9.png"></p>
<p><img data-src="/2025/06/24/build-site/10.png"></p>
<p><img data-src="/2025/06/24/build-site/11.png"></p>
<p>在最终的界面中，这两个就是我们需要的域名服务器的地址，把它们复制下来。<br><img data-src="/2025/06/24/build-site/12.png"></p>
<h5 id="更改-porkbun-中默认的域名服务器地址"><a href="#更改-porkbun-中默认的域名服务器地址" class="headerlink" title="更改 porkbun 中默认的域名服务器地址"></a>更改 porkbun 中默认的域名服务器地址</h5><p>回到猪肉包中，改变<code>NAMESERVERS</code>中的内容即可。先清空，再把上面的两个地址一个一个粘贴进去，提交后就是下面的样子。<br><img data-src="/2025/06/24/build-site/13.png"></p>
<p>之后再回到 cloudflare 的界面，检查一下域名服务器：<br><img data-src="/2025/06/24/build-site/14.png"></p>
<p>这个过程一般会在 10 分钟之内完成。当这里变为“Active”的时候，我们就可以进行最后一步了。<br><img data-src="/2025/06/24/build-site/15.png"></p>
<p>最后一步也很简单，点进我的截图所指的位置：<br><img data-src="/2025/06/24/build-site/16.png"></p>
<p>你一共需要在弹出框中填写两次列表，我还是以我的为例：<br><img data-src="/2025/06/24/build-site/17.png"></p>
<p>第一次：<code>CNAME</code>-&gt;<code>www</code>-&gt;<code>spectrumzero.github.io</code>-&gt;<code>proxied</code>-&gt;<code>Auto</code><br>第二次：<code>CNAME</code>-&gt;<code>@</code>-&gt;<code>spectrumzero.github.io</code>-&gt;<code>proxied</code>-&gt;<code>Auto</code></p>
<p>第二次是为了方便别人可以直接通过<code>spectrumzero.me</code>来访问我的网站，而不必输入<code>www.spectrumzero.me</code>。</p>
<p><em>请注意，这里的<code>Target</code>应该是 github pages 的根域名，后面没有路径</em>。</p>
<p>最后记得保存即可，效果：<br><img data-src="/2025/06/24/build-site/18.png"></p>
<p>然后回到<code>_config.yml</code>文件中，将<code>url</code>一行换成你最终自定义的域名即可，如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://www.spectrumzero.me</span></span><br></pre></td></tr></table></figure>

<p>之后，在项目的根目录执行<code>hexo c</code>-&gt;<code>hexo g</code>-&gt;<code>hexo d</code>，你的项目就会部署到指定的域名上了。第一次部署的时间可能会稍微会长一点，耐心等待即可。稍后即可以你喜欢的域名访问你的网站了。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>现在我们可以通过<code>github.username.io</code>，或者是自定义的域名来访问我们的网站了。这也是我的这个网站诞生的过程。网站只是一种呈现的方式，而在哪里记录则有十分丰富的选择。所以写作的流程不一定是<code>hexo new &quot;Hello World&quot;</code>，然后就很规矩地在这个网站项目的本地文件夹中写。我更喜欢的方式是，先在专门的 Obsidian Vault 中写好，然后再把文字复制到那个新的博客 markdown 中，把图片放到对应的文件夹里。这样就最大程度地避免因为呈现的繁琐而不愿意呈现。某种程度上，”<em>Learn in public</em>“确实很有道理。</p>
<p><em>提示：为了方便管理图片，很推荐一篇文章一个文件夹的做法，可以参看这个<a href="https://chrismroberts.com/2020/01/06/using-markdown-in-hexo-to-add-images/">链接</a>。以及对于那些非文章的图片，也就是可能用来配置网站的图片，建议放在根目录下的<code>source/images</code>文件夹下。这一点也可以参照<a href="https://hexo.io/zh-cn/docs/asset-folders">hexo 官方文档</a></em>。</p>
<p>现在，远程仓库只有一个分支，也就是<code>gh-pages</code>分支。这个分支是由源代码构建的产物。你可以选择将你的源代码推送到远程仓库的<strong>另外一个分支</strong>，以便实现更好的管理。需要先在网站根目录中执行<code>git init .</code>来将整个项目纳入 git 的追踪，之后的步骤则请自行 ai。</p>
<p>最后，如果需要的话，你也可以参考我的<a href="https://github.com/spectrumzero/my_site/tree/main">源代码分支</a>。</p>
]]></content>
      <tags>
        <tag>guide</tag>
      </tags>
  </entry>
  <entry>
    <title>hello world</title>
    <url>/2025/06/20/hello-world/</url>
    <content><![CDATA[<p>基于hexo博客框架，使用NexT Gemini主题。打造独特书写体验。</p>
<p>放一些整理得比较系统的笔记上来。在此之前，让我测试一下渲染功能吧。</p>
<h1 id="文本格式支持"><a href="#文本格式支持" class="headerlink" title="文本格式支持"></a>文本格式支持</h1><p>Words in regular format.<br><em>斜体字</em>。<br><strong>还有加粗的标记。</strong><br><em><strong>很少用到的加粗斜体。</strong></em><br><strong>还有加粗的标记。</strong><br><em>斜体字</em>。<br>Words in regular format.</p>
<h1 id="代码格式支持"><a href="#代码格式支持" class="headerlink" title="代码格式支持"></a>代码格式支持</h1><h2 id="java格式"><a href="#java格式" class="headerlink" title="java格式"></a>java格式</h2><p>在下面定义一个<code>java</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是程序的入口点，main 方法。</span></span><br><span class="line"><span class="comment">     * 当你运行这个程序时，JVM (Java 虚拟机) 会从这里开始执行。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 命令行参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 System.out.println() 方法将文本打印到控制台</span></span><br><span class="line">        <span class="comment">// println 会在打印后自动换行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其它格式"><a href="#其它格式" class="headerlink" title="其它格式"></a>其它格式</h2><ul>
<li>python</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用内置的 print() 函数来向控制台输出文本</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>cpp</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入输入输出流库，cout 就在这里定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main 函数是 C++ 程序的入口点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// std::cout 用于向标准输出（通常是控制台）发送数据</span></span><br><span class="line">    <span class="comment">// &lt;&lt; 是流插入运算符</span></span><br><span class="line">    <span class="comment">// std::endl 用于输出一个换行符并刷新输出缓冲区</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回 0 表示程序成功执行完毕</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>javascript</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 console.log() 方法将信息打印到控制台</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br></pre></td></tr></table></figure>


<h1 id="图片和链接支持"><a href="#图片和链接支持" class="headerlink" title="图片和链接支持"></a>图片和链接支持</h1><p>现在来测试图片。确保使用的是<code>post_asset_folder</code>，这样会节约从obsidian迁移文档到<code>_post</code>文件夹中的时间。可以参考这个<a href="https://chrismroberts.com/2020/01/06/using-markdown-in-hexo-to-add-images/">链接</a>。</p>
<p>下面是一张图片，推上找的。因为今天下雨了。</p>
<p><img data-src="/2025/06/20/hello-world/1.png"></p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>嗯，好了。可以慢慢往上面搬东西。评论和目录功能也良好。i18n和l10n以后再做吧。</p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
